/*
    Test is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Test is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Test.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.17.0

#include <stan/model/model_header.hpp>

namespace model_powerps_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_powerps");
    reader.add_event(73, 73, "end", "model_powerps");
    return reader;
}

#include <meta_header.hpp>
 class model_powerps : public prob_grad {
private:
    int S;
    vector<int> N0;
    vector<double> YBAR0;
    vector<double> SD0;
    vector<int> N1;
    int TN1;
    vector<double> Y1;
    vector<int> INX1;
    vector_d RS;
    int FIXVS;
    double A;
    row_vector_d WS1;
public:
    model_powerps(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_powerps(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_powerps_namespace::model_powerps";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        // initialize member variables
        try {
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            current_statement_begin__ = 9;
            validate_non_negative_index("N0", "S", S);
            context__.validate_dims("data initialization", "N0", "int", context__.to_vec(S));
            validate_non_negative_index("N0", "S", S);
            N0 = std::vector<int>(S,int(0));
            vals_i__ = context__.vals_i("N0");
            pos__ = 0;
            size_t N0_limit_0__ = S;
            for (size_t i_0__ = 0; i_0__ < N0_limit_0__; ++i_0__) {
                N0[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("YBAR0", "S", S);
            context__.validate_dims("data initialization", "YBAR0", "double", context__.to_vec(S));
            validate_non_negative_index("YBAR0", "S", S);
            YBAR0 = std::vector<double>(S,double(0));
            vals_r__ = context__.vals_r("YBAR0");
            pos__ = 0;
            size_t YBAR0_limit_0__ = S;
            for (size_t i_0__ = 0; i_0__ < YBAR0_limit_0__; ++i_0__) {
                YBAR0[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("SD0", "S", S);
            context__.validate_dims("data initialization", "SD0", "double", context__.to_vec(S));
            validate_non_negative_index("SD0", "S", S);
            SD0 = std::vector<double>(S,double(0));
            vals_r__ = context__.vals_r("SD0");
            pos__ = 0;
            size_t SD0_limit_0__ = S;
            for (size_t i_0__ = 0; i_0__ < SD0_limit_0__; ++i_0__) {
                SD0[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("N1", "S", S);
            context__.validate_dims("data initialization", "N1", "int", context__.to_vec(S));
            validate_non_negative_index("N1", "S", S);
            N1 = std::vector<int>(S,int(0));
            vals_i__ = context__.vals_i("N1");
            pos__ = 0;
            size_t N1_limit_0__ = S;
            for (size_t i_0__ = 0; i_0__ < N1_limit_0__; ++i_0__) {
                N1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "TN1", "int", context__.to_vec());
            TN1 = int(0);
            vals_i__ = context__.vals_i("TN1");
            pos__ = 0;
            TN1 = vals_i__[pos__++];
            current_statement_begin__ = 16;
            validate_non_negative_index("Y1", "TN1", TN1);
            context__.validate_dims("data initialization", "Y1", "double", context__.to_vec(TN1));
            validate_non_negative_index("Y1", "TN1", TN1);
            Y1 = std::vector<double>(TN1,double(0));
            vals_r__ = context__.vals_r("Y1");
            pos__ = 0;
            size_t Y1_limit_0__ = TN1;
            for (size_t i_0__ = 0; i_0__ < Y1_limit_0__; ++i_0__) {
                Y1[i_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("INX1", "TN1", TN1);
            context__.validate_dims("data initialization", "INX1", "int", context__.to_vec(TN1));
            validate_non_negative_index("INX1", "TN1", TN1);
            INX1 = std::vector<int>(TN1,int(0));
            vals_i__ = context__.vals_i("INX1");
            pos__ = 0;
            size_t INX1_limit_0__ = TN1;
            for (size_t i_0__ = 0; i_0__ < INX1_limit_0__; ++i_0__) {
                INX1[i_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 20;
            validate_non_negative_index("RS", "S", S);
            context__.validate_dims("data initialization", "RS", "vector_d", context__.to_vec(S));
            validate_non_negative_index("RS", "S", S);
            RS = vector_d(static_cast<Eigen::VectorXd::Index>(S));
            vals_r__ = context__.vals_r("RS");
            pos__ = 0;
            size_t RS_i_vec_lim__ = S;
            for (size_t i_vec__ = 0; i_vec__ < RS_i_vec_lim__; ++i_vec__) {
                RS[i_vec__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "FIXVS", "int", context__.to_vec());
            FIXVS = int(0);
            vals_i__ = context__.vals_i("FIXVS");
            pos__ = 0;
            FIXVS = vals_i__[pos__++];
            current_statement_begin__ = 25;
            context__.validate_dims("data initialization", "A", "double", context__.to_vec());
            A = double(0);
            vals_r__ = context__.vals_r("A");
            pos__ = 0;
            A = vals_r__[pos__++];

            // validate, data variables
            current_statement_begin__ = 6;
            check_greater_or_equal(function__,"S",S,2);
            current_statement_begin__ = 9;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_greater_or_equal(function__,"N0[k0__]",N0[k0__],1);
            }
            current_statement_begin__ = 10;
            current_statement_begin__ = 11;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_greater_or_equal(function__,"SD0[k0__]",SD0[k0__],0);
            }
            current_statement_begin__ = 14;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_greater_or_equal(function__,"N1[k0__]",N1[k0__],1);
            }
            current_statement_begin__ = 15;
            check_greater_or_equal(function__,"TN1",TN1,1);
            current_statement_begin__ = 16;
            current_statement_begin__ = 17;
            for (int k0__ = 0; k0__ < TN1; ++k0__) {
                check_greater_or_equal(function__,"INX1[k0__]",INX1[k0__],1);
            }
            current_statement_begin__ = 20;
            check_greater_or_equal(function__,"RS",RS,0);
            current_statement_begin__ = 22;
            check_greater_or_equal(function__,"FIXVS",FIXVS,0);
            check_less_or_equal(function__,"FIXVS",FIXVS,1);
            current_statement_begin__ = 25;
            check_greater_or_equal(function__,"A",A,0);
            // initialize data variables
            current_statement_begin__ = 29;
            validate_non_negative_index("WS1", "S", S);
            WS1 = row_vector_d(static_cast<Eigen::VectorXd::Index>(S));
            stan::math::fill(WS1,DUMMY_VAR__);

            current_statement_begin__ = 30;
            for (int i = 1; i <= S; ++i) {

                current_statement_begin__ = 31;
                stan::math::assign(get_base1_lhs(WS1,i,"WS1",1), get_base1(N1,i,"N1",1));
                current_statement_begin__ = 32;
                stan::math::assign(get_base1_lhs(WS1,i,"WS1",1), (get_base1(WS1,i,"WS1",1) / TN1));
            }

            // validate transformed data
            current_statement_begin__ = 29;
            check_greater_or_equal(function__,"WS1",WS1,0);
            check_less_or_equal(function__,"WS1",WS1,1);

            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 37;
            validate_non_negative_index("vs", "S", S);
            num_params_r__ += (S - 1);
            current_statement_begin__ = 38;
            validate_non_negative_index("thetas", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 39;
            validate_non_negative_index("taus", "S", S);
            num_params_r__ += S;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_powerps() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        if (!(context__.contains_r("vs")))
            throw std::runtime_error("variable vs missing");
        vals_r__ = context__.vals_r("vs");
        pos__ = 0U;
        validate_non_negative_index("vs", "S", S);
        context__.validate_dims("initialization", "vs", "vector_d", context__.to_vec(S));
        vector_d vs(static_cast<Eigen::VectorXd::Index>(S));
        for (int j1__ = 0U; j1__ < S; ++j1__)
            vs(j1__) = vals_r__[pos__++];
        try {
            writer__.simplex_unconstrain(vs);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable vs: ") + e.what());
        }

        if (!(context__.contains_r("thetas")))
            throw std::runtime_error("variable thetas missing");
        vals_r__ = context__.vals_r("thetas");
        pos__ = 0U;
        validate_non_negative_index("thetas", "S", S);
        context__.validate_dims("initialization", "thetas", "vector_d", context__.to_vec(S));
        vector_d thetas(static_cast<Eigen::VectorXd::Index>(S));
        for (int j1__ = 0U; j1__ < S; ++j1__)
            thetas(j1__) = vals_r__[pos__++];
        try {
            writer__.vector_unconstrain(thetas);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable thetas: ") + e.what());
        }

        if (!(context__.contains_r("taus")))
            throw std::runtime_error("variable taus missing");
        vals_r__ = context__.vals_r("taus");
        pos__ = 0U;
        validate_non_negative_index("taus", "S", S);
        context__.validate_dims("initialization", "taus", "double", context__.to_vec(S));
        std::vector<double> taus(S,double(0));
        for (int i0__ = 0U; i0__ < S; ++i0__)
            taus[i0__] = vals_r__[pos__++];
        for (int i0__ = 0U; i0__ < S; ++i0__)
            try {
            writer__.scalar_lb_unconstrain(0,taus[i0__]);
        } catch (const std::exception& e) { 
            throw std::runtime_error(std::string("Error transforming variable taus: ") + e.what());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        try {
            // model parameters
            stan::io::reader<T__> in__(params_r__,params_i__);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  vs;
            (void) vs;  // dummy to suppress unused var warning
            if (jacobian__)
                vs = in__.simplex_constrain(S,lp__);
            else
                vs = in__.simplex_constrain(S);

            Eigen::Matrix<T__,Eigen::Dynamic,1>  thetas;
            (void) thetas;  // dummy to suppress unused var warning
            if (jacobian__)
                thetas = in__.vector_constrain(S,lp__);
            else
                thetas = in__.vector_constrain(S);

            vector<T__> taus;
            size_t dim_taus_0__ = S;
            taus.reserve(dim_taus_0__);
            for (size_t k_0__ = 0; k_0__ < dim_taus_0__; ++k_0__) {
                if (jacobian__)
                    taus.push_back(in__.scalar_lb_constrain(0,lp__));
                else
                    taus.push_back(in__.scalar_lb_constrain(0));
            }


            // transformed parameters
            current_statement_begin__ = 43;
            validate_non_negative_index("as", "S", S);
            vector<T__> as(S);
            stan::math::initialize(as, DUMMY_VAR__);
            stan::math::fill(as,DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("sds", "S", S);
            vector<T__> sds(S);
            stan::math::initialize(sds, DUMMY_VAR__);
            stan::math::fill(sds,DUMMY_VAR__);


            current_statement_begin__ = 46;
            for (int i = 1; i <= S; ++i) {

                current_statement_begin__ = 47;
                if (as_bool(logical_eq(0,FIXVS))) {

                    current_statement_begin__ = 48;
                    stan::math::assign(get_base1_lhs(as,i,"as",1), (logical_lt(1,((A * get_base1(vs,i,"vs",1)) / get_base1(N0,i,"N0",1))) ? stan::math::promote_scalar<T__>(1) : stan::math::promote_scalar<T__>(((A * get_base1(vs,i,"vs",1)) / get_base1(N0,i,"N0",1))) ));
                } else {

                    current_statement_begin__ = 50;
                    stan::math::assign(get_base1_lhs(as,i,"as",1), (logical_lt(1,((A * get_base1(RS,i,"RS",1)) / get_base1(N0,i,"N0",1))) ? stan::math::promote_scalar<double>(1) : stan::math::promote_scalar<double>(((A * get_base1(RS,i,"RS",1)) / get_base1(N0,i,"N0",1))) ));
                }
                current_statement_begin__ = 52;
                stan::math::assign(get_base1_lhs(sds,i,"sds",1), (logical_eq(0,get_base1(as,i,"as",1)) ? stan::math::promote_scalar<T__>(0) : stan::math::promote_scalar<T__>((get_base1(SD0,i,"SD0",1) / sqrt((get_base1(as,i,"as",1) * get_base1(N0,i,"N0",1))))) ));
            }

            // validate transformed parameters
            for (int i0__ = 0; i0__ < S; ++i0__) {
                if (stan::math::is_uninitialized(as[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: as" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }
            for (int i0__ = 0; i0__ < S; ++i0__) {
                if (stan::math::is_uninitialized(sds[i0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: sds" << '[' << i0__ << ']';
                    throw std::runtime_error(msg__.str());
                }
            }

            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 43;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_greater_or_equal(function__,"as[k0__]",as[k0__],0);
                check_less_or_equal(function__,"as[k0__]",as[k0__],1);
            }
            current_statement_begin__ = 44;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_greater_or_equal(function__,"sds[k0__]",sds[k0__],0);
            }

            // model body

            current_statement_begin__ = 58;
            if (as_bool(logical_gt(A,0))) {

                current_statement_begin__ = 59;
                lp_accum__.add(normal_log(YBAR0,thetas,sds));
            } else {

                current_statement_begin__ = 61;
                lp_accum__.add(normal_log<propto__>(thetas, 0, 1000));
            }
            current_statement_begin__ = 63;
            lp_accum__.add(dirichlet_log<propto__>(vs, RS));
            current_statement_begin__ = 64;
            lp_accum__.add(cauchy_log<propto__>(taus, 0, 2.5));
            current_statement_begin__ = 67;
            lp_accum__.add(normal_log<propto__>(Y1, stan::model::rvalue(thetas, stan::model::cons_list(stan::model::index_multi(INX1), stan::model::nil_index_list()), "thetas"), stan::model::rvalue(taus, stan::model::cons_list(stan::model::index_multi(INX1), stan::model::nil_index_list()), "taus")));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("vs");
        names__.push_back("thetas");
        names__.push_back("taus");
        names__.push_back("as");
        names__.push_back("sds");
        names__.push_back("theta");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "model_powerps_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        vector_d vs = in__.simplex_constrain(S);
        vector_d thetas = in__.vector_constrain(S);
        vector<double> taus;
        size_t dim_taus_0__ = S;
        for (size_t k_0__ = 0; k_0__ < dim_taus_0__; ++k_0__) {
            taus.push_back(in__.scalar_lb_constrain(0));
        }
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(vs[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(thetas[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(taus[k_0__]);
            }

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        double DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            current_statement_begin__ = 43;
            validate_non_negative_index("as", "S", S);
            vector<double> as(S, 0.0);
            stan::math::initialize(as, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(as,DUMMY_VAR__);
            current_statement_begin__ = 44;
            validate_non_negative_index("sds", "S", S);
            vector<double> sds(S, 0.0);
            stan::math::initialize(sds, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(sds,DUMMY_VAR__);


            current_statement_begin__ = 46;
            for (int i = 1; i <= S; ++i) {

                current_statement_begin__ = 47;
                if (as_bool(logical_eq(0,FIXVS))) {

                    current_statement_begin__ = 48;
                    stan::math::assign(get_base1_lhs(as,i,"as",1), (logical_lt(1,((A * get_base1(vs,i,"vs",1)) / get_base1(N0,i,"N0",1))) ? stan::math::promote_scalar<double>(1) : stan::math::promote_scalar<double>(((A * get_base1(vs,i,"vs",1)) / get_base1(N0,i,"N0",1))) ));
                } else {

                    current_statement_begin__ = 50;
                    stan::math::assign(get_base1_lhs(as,i,"as",1), (logical_lt(1,((A * get_base1(RS,i,"RS",1)) / get_base1(N0,i,"N0",1))) ? stan::math::promote_scalar<double>(1) : stan::math::promote_scalar<double>(((A * get_base1(RS,i,"RS",1)) / get_base1(N0,i,"N0",1))) ));
                }
                current_statement_begin__ = 52;
                stan::math::assign(get_base1_lhs(sds,i,"sds",1), (logical_eq(0,get_base1(as,i,"as",1)) ? stan::math::promote_scalar<double>(0) : stan::math::promote_scalar<double>((get_base1(SD0,i,"SD0",1) / sqrt((get_base1(as,i,"as",1) * get_base1(N0,i,"N0",1))))) ));
            }

            // validate transformed parameters
            current_statement_begin__ = 43;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_greater_or_equal(function__,"as[k0__]",as[k0__],0);
                check_less_or_equal(function__,"as[k0__]",as[k0__],1);
            }
            current_statement_begin__ = 44;
            for (int k0__ = 0; k0__ < S; ++k0__) {
                check_greater_or_equal(function__,"sds[k0__]",sds[k0__],0);
            }

            // write transformed parameters
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(as[k_0__]);
            }
            for (int k_0__ = 0; k_0__ < S; ++k_0__) {
            vars__.push_back(sds[k_0__]);
            }

            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 71;
            double theta(0.0);
            (void) theta;  // dummy to suppress unused var warning

            stan::math::initialize(theta, std::numeric_limits<double>::quiet_NaN());
            stan::math::fill(theta,DUMMY_VAR__);


            current_statement_begin__ = 72;
            stan::math::assign(theta, multiply(WS1,thetas));

            // validate generated quantities
            current_statement_begin__ = 71;

            // write generated quantities
        vars__.push_back(theta);

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_powerps";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "vs" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "thetas" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "taus" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "as" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sds" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        for (int k_0__ = 1; k_0__ <= (S - 1); ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "vs" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "thetas" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "taus" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "as" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= S; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sds" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
    }

}; // model

}

typedef model_powerps_namespace::model_powerps stan_model;


#endif
